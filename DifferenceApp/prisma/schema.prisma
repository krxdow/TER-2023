// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// https://www.prisma.io/docs/concepts/components/prisma-schema/relations

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")        // date à laquelle le mail a été verifié 
  image         String?
  createdAt     DateTime  @default(now())               // moment ou l'utilsiateur a été créer ?
  updatedAt     DateTime  @updatedAt                    // moment ou l'utilsiateur est mise à jour
  accounts      Account[]
  sessions      Session[]

  password    String? // todo: hash password or encrypt method
  games       Game[]        @relation(name: "UserGames") // un utilisateur a plusieurs jeux
  gamesPlayed GamesPlayed[] @relation(name: "UserGamesPlayed") // un utilisateur joue a plusieursparties

  @@map("user")
}

model Game {
  id_game        Int     @id @default(autoincrement())
  // Premier terme
  firstTerme     Entites @relation("firstEntite", fields: [idFirstTerm], references: [id_entite])
  idFirstTerm    Int     @unique
  // Second terme
  secondTerme    Entites @relation("secondEntite", fields: [idSecondTerm], references: [id_entite])
  idSecondTerm   Int     @unique
  // Utilisateur
  user           User    @relation(name: "UserGames", fields: [idUser], references: [id])
  idUser         String  @unique
  // Données autre
  number_of_play Int // nombre de personne qui ont joué
  is_ajoute      Boolean @default(false) // si le jeu a été ajouté par l'admin ou par les autres

  // Liste de chaque données qu'un jeu peut avoir
  differences Differences[] @relation(name: "GameDifference") // un jeu peut avoir plusieurs differences
  gamePlayed  GamesPlayed[] @relation(name: "GameGamesPlayed") // un jeu est dans plusieurs parties joué

  @@map("game")
}

// Table sur les entités existantent
model Entites {
  id_entite    Int     @id @default(autoincrement())
  nom_entite   String
  categorie    String?                          //possiblité que la categorie d'un mot soit possiblement nul car les utilisateurs ne crée pas leurs catégorie
  is_ajoute    Boolean @default(false)          // attribut permettant de savoir si l'entité est ajouter par un utilisateur ou non
  entite1Games Game[]  @relation(name: "firstEntite") // une entite est présente en tant que premier terme dans plusieurs jeux
  entite2Games Game[]  @relation(name: "secondEntite") // une entite est présente en tant que second terme dans plusieurs jeux

  @@map("entites")
}

// Table sur les différences qui existe
model Differences {
  id_diff     Int    @id @default(autoincrement())
  type_diff   String @default("CARACTERISTIQUE") // autre possiblité etant lieu et couleur
  valeur_diff String
  game        Game   @relation("GameDifference", fields: [idGame], references: [id_game])
  idGame      Int    @unique

  @@map("differences")
}

// Table qui caracterise les parties joué
model GamesPlayed {
  // Jeu
  idGame      Int      @unique
  game        Game     @relation("GameGamesPlayed", fields: [idGame], references: [id_game])
  // Joueur
  idPlayer    String   @unique
  player      User     @relation("UserGamesPlayed", fields: [idPlayer], references: [id])
  // Information sur la partie
  startplay   DateTime // la date à laquelle la partie à commencé
  is_fini     Boolean // si la partie est fini
  pourcentage Int // pourcentage de réponse attendu
  score       Int // score obtenue après calcul

  @@map("gameplayed")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verificationtokens")
}
